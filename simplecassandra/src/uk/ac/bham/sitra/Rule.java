package uk.ac.bham.sitra;

/**
 * <p>
 * All transformation Rules have to implement this interface.
 * </p>
 * 
 * @param <S>
 *            The type of the source object to transform.
 * @param <T>
 *            The type of the target object generated.
 * 
 * @author David Akehurst
 * @author Behzad Bordbar
 * @version 0.2
 * @see Transformer
 */
public interface Rule<S, T> {

	/**
	 * <p>
	 * The implementation will return true or false, depending on whether the
	 * transformation rule should be applied.
	 * </p>
	 * 
	 * @return Whether this rule applies to a given source object.
	 */
	public boolean check(final S source);

	/**
	 * <p>
	 * The implementations of this method are responsible for generating the
	 * target object for a given source object and a transformer.
	 * </p>
	 * 
	 * <p>
	 * In particular implementation should create and return a target object of
	 * type <code>T</code> for the given source element <code>source</code> and
	 * the {@link Transformer} implementation <code>transformer</code>.
	 * </p>
	 * 
	 * @param source
	 *            The source object to transform.
	 * @param transformer
	 *            The transformer implementation responsible for carrying out
	 *            the actual transformation.
	 * @return The target object generated by this rule.
	 */
	public T build(final S source, final Transformer transformer);

	/**
	 * <p>
	 * Implementations can use this method should contain the code to set the
	 * values of properties of the target object <code>target</code> after it
	 * has been generated by the <code>build</code> method.
	 * </p>
	 * 
	 * @param target
	 *            The target object for which we want to update the properties.
	 * @param source
	 *            The source object that corresponds to the target object.
	 * @param transformer
	 *            A Transformer implementation.
	 */
	public void setProperties(final T target, final S source,
			final Transformer transformer);
}
